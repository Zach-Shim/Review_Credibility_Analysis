# Python Imports
import datetime
import math
import pandas as pd
import webbrowser

import numpy as np
import matplotlib
matplotlib.use("TkAgg")
import scipy.stats as stats

from pyculiarity import detect_ts, detect_vec
from collections import defaultdict

# Django Imports
from django.contrib.auth.models import User
from django.core.management.base import BaseCommand
from django.utils.crypto import get_random_string
from django.db.models import Max, Min, Avg

# Relative Imports
from ...models import User, Product, Review
from .detection_algorithms import DetectionAlgorithms


'''
    Description:
        Used by the results() view in views.py to dynamically calculate a new review
        Also used as terminal command: python manage.py anomaly (asin)
    Parameters:
        A valid product ASIN given as input in the command line
'''
class Command(BaseCommand):
    help = 'Get product review anomaly scores'

    # adds an argument to **kwards in the handle function
    def add_arguments(self, parser):
        parser.add_argument('productASIN', type=str, help='Indicates the asin of the product we are currently analyzing')

    # args holds number of args, kwargs is dict of args
    def handle(self, *args, **kwargs):
        asin = kwargs['productASIN']
        r_anomaly = Anomaly(asin)
        r_anomaly.detect(asin, 'mean')        
        r_anomaly.detect(asin, 'count')        



'''
    Description:
        Used by the results() view in views.py to dynamically calculate a new review's review and rating anomaly score
    Parameters:
        A valid product ASIN
'''
class Anomaly(DetectionAlgorithms):

    def __init__(self, productASIN):
        self.bins = []
        self.metricSeries = pd.DataFrame()

        self.ratingValueAnomalies = defaultdict(dict)
        self.ratingCountAnomalies = defaultdict(dict)

        # invoking the constructor of the parent class  
        super(Anomaly, self).__init__(productASIN)  


    # returns reviews in bins of 30-day time series
    def detect(self, productASIN, stat):
        self.bins = super(Anomaly, self).bin(productASIN)
        reviewTimes = self.reviewsInfo["reviewTimesInt"]
        reviewScores = self.reviewsInfo["reviewScores"]

        # metric is either average rating or count of reviews
        metric, bin_edges, binnumber = stats.binned_statistic(reviewTimes, reviewScores, statistic=stat, bins=self.bins)
        metric = metric[np.isfinite(metric)]
        print(metric)
        binsTimestamps = [np.datetime64(datetime.datetime.fromtimestamp(x)) for x in self.bins]
        self.__compressBins(metric, binsTimestamps)
        metric = metric[metric != 0]
        
        print("binsTimestamps len " + str(len(binsTimestamps)))
        print("metric len " + str(len(metric)))
        # make a time series x metric frame and calculate anomalies in data distrbutions
        metricFrame = {"timestamp": binsTimestamps, "value": metric}
        self.metricSeries = pd.DataFrame(metricFrame)
        anomalyScore = self.__calculate(self.metricSeries, self.reviewInfo["reviewCount"])
        print(anomalyScore)
        Product.objects.filter(asin=productASIN).update(ratingAnomalyRate=anomalyScore)
